function wordlist(n) {	var s = document.main;	var ltype = s.wltype;	var ktype = s.kytype;	var tokniz = s.tok;	var lfreq = s.listfreq.value;	var outputdata = "";	var intex = s.textin.value.toLowerCase();	document.getElementById('output').innerHTML = "";	if (intex == "") {		alert("Please provide text in the Text field");		return;	}	var start = new Date().getTime();	intex = intex.replace(/\n/g, " ");	intex = intex.replace(/\r/g, "");	intex = intex.replace(/  /g, " ");	//if remove HTML tags	intex = removeHTMLTags(intex);		if (s.numdeal.checked) {		intex = intex.replace(/\d+.\d+/g, "00");	}	if (tokniz[0].checked) {		intex = intex.replace(/n\'t/gi, " n\'t");		intex = intex.replace(/it\'s/gi, "it \'s");		intex = intex.replace(/that\'s/gi, "that \'s");		intex = intex.replace(/i\'m/gi, "i \'m");		intex = intex.replace(/he\'s/gi, "he \'s");		intex = intex.replace(/she\'s/gi, "she \'s");		intex = intex.replace(/.\'re/gi, ". \'re");		intex = intex.replace(/.\'d/gi, ". \'d");		intex = intex.replace(/.\'ll/gi, ". \'ll");		intex = intex.replace(/.\'ve/gi, ". \'ve");		intex = intex.replace(/there\'s/gi, "there \'s");		intex = intex.replace(/cannot/gi, "can not");	}	var words = [];	var lword = [];	var wcount = [];	var wpt = [];	var fline = [];	var freqorder = [];	var neworder = [];	var wordering = [];	if (n == 0) {		if (ktype[0].checked) {			var kw = words = intex.match(/\b[A-Za-z1-9_]+\b/gi);		} else if (ktype[1].checked) {			var kw = words = intex.match(/\b\S+\b/gi);		} else if (ktype[2].checked) {			var kw = words = intex.match(/\b[a-z\u00C0-\u00ffA-Z]+\b/gi);//unicode para acentos [a-z\u00C0-\u00ff A-Z]		}	} else if (n == 1) {		intex = intex.replace(/\s+/g, "");		var kw = words = intex.match(/./gi);	}	//words.sort();	if (s.numdeal.checked) {		wordering = new Array;		for (i = 0; i < words.length; i++) {			words[i] = words[i].replace(/\d+/g, "#");			if (words[i] != null && words[i] != "") {				if (wordering[words[i]] > 0) {					wordering[words[i]]++;				} else {					wordering[words[i]] = 1;				}			}		}	} else {		wordering = new Array;		for (i = 0; i < words.length; i++) {			if (words[i] != null && words[i] != "") {				if (wordering[words[i]] > 0) {					wordering[words[i]]++;				} else {					wordering[words[i]] = 1;				}			}		}	}	var tor = new Array;	ii = 0	for (i in wordering) {		tor[ii] = new Array;		tor[ii][0] = wordering[i]		tor[ii][1] = i.replace(/\b_/, "")		ii++	}	if (ltype[1].checked) {		tor.sort(function (a, b) {			var ac = a[0]			var bc = b[0]			var ad = a[1]			var bd = b[1]			if (ac == bc && ad > bd) return 0;			return (ac < bc) ? 1 : -1;		});	} else if (ltype[0].checked) {		tor.sort(function (a, b) {			var ad = a[1]			var bd = b[1]			if (ad == bd) return 0;			return (ad > bd) ? 1 : -1;		});	}	var totaltoken = words.length	if (ltype[0].checked) {		for (w = 0; w < tor.length; w++) {			wpt[w] = Math.ceil(tor[w][0] / totaltoken * 100000) / 100;			fline[w] = "<td>" + (w + 1) + "</td><td>" + tor[w][1] + "</td>\n<td align=\"right\">" + tor[w][0] + "</td>\n<td align=\"right\">" + wpt[w].toString() + "</td>\n";		}	} else if (ltype[1].checked) {		for (w = 0; w < tor.length; w++) {			if (tor[w][0] < lfreq) {				break;			}			wpt[w] = Math.ceil(tor[w][0] / totaltoken * 100000) / 100;			fline[w] = "<td>" + (w + 1) + "</td><td>" + tor[w][1] + "</td>\n<td align=\"right\">" + tor[w][0] + "</td>\n<td>" + searchwordlemma(tor[w][1]) + "</td>\n<td align=\"right\">" + wpt[w].toString() +"</td>\n";		}	}	outputdata = "<p><b>Total Token</b>: " + words.length + " <b>Total Word Types</b>: " + tor.length + "\n";	outputdata += "<table id=\"example\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"display\">\n"	outputdata += "<thead><tr><th>ID</th><th>Word</th><th>Frequency</th><th>Lemma</th><th>Frequency by 1000</th></thead>\n";	outputdata += "<tbody>\n";	for (w in fline) {		outputdata += "<tr class=\"gradeA\">\n";		outputdata += fline[w];		outputdata += "</tr>\n";	}	outputdata += "</tbody>\n";	outputdata += "</table>\n";	var end = new Date().getTime();	var time = end - start;	alert('Execution Time: ' + time + ' ms\nTotal Word Types: ' + tor.length + '\nTotal Token: '+ words.length);	document.getElementById('output').innerHTML = outputdata;}function searchwordlemma(palavra) {	for (var i = 0; i < palavras.length; i++) {		if (palavras[i] == palavra) {			return lemmas[i];		}	}	return '';}